Metadata-Version: 2.1
Name: weather-project
Version: 0.2.0
Summary: a site where the user enters the name of a city and receives a weather forecast for that city for the near future
Home-page: https://github.com/LipkiyPetrucho/weather/tree/add-redis
Author: Petr
Author-email: bang1987@mail.ru
Requires-Python: >=3.12,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: Django (==5.0.7)
Requires-Dist: async-timeout (==4.0.3)
Requires-Dist: attrs (==23.2.0)
Requires-Dist: certifi (==2024.7.4)
Requires-Dist: charset-normalizer (==3.3.2)
Requires-Dist: dadata (==21.10.1)
Requires-Dist: django-redis (==5.4.0)
Requires-Dist: djangorestframework (==3.15.2)
Requires-Dist: djangorestframework-simplejwt (==5.3.1)
Requires-Dist: flatbuffers (==24.3.25)
Requires-Dist: fontawesome (==5.10.1.post1)
Requires-Dist: gunicorn (>=20.0.4,<21.0.0)
Requires-Dist: h11 (==0.14.0)
Requires-Dist: httpcore (==1.0.5)
Requires-Dist: httpx (==0.27.0)
Requires-Dist: idna (==3.7)
Requires-Dist: numpy (==2.0.1)
Requires-Dist: openmeteo-py (==0.0.1)
Requires-Dist: openmeteo_requests (==1.2.1)
Requires-Dist: openmeteo_sdk (==1.11.11)
Requires-Dist: packaging (==24.1)
Requires-Dist: pandas (==2.2.2)
Requires-Dist: pytz (==2024.1)
Requires-Dist: redis (==4.3.4)
Requires-Dist: requests (==2.32.3)
Requires-Dist: requests-cache (==1.2.1)
Requires-Dist: retry-requests (==2.0.0)
Requires-Dist: six (==1.16.0)
Requires-Dist: sniffio (==1.3.1)
Requires-Dist: sqlparse (==0.5.1)
Requires-Dist: tzdata (==2024.1)
Requires-Dist: url-normalize (==1.4.3)
Requires-Dist: urllib3 (==2.2.2)
Requires-Dist: wrapt (==1.16.0)
Project-URL: Repository, https://github.com/LipkiyPetrucho/weather/tree/add-redis
Description-Content-Type: text/markdown

## Django-приложение, которое отображает прогноз погоды для заданного города.

### Стек технологий:

<img align="right" alt="PNG" height="200px" src="https://d1tlzifd8jdoy4.cloudfront.net/wp-content/uploads/2022/03/unnamed-2.jpg" />

 - ![alt text](https://img.shields.io/badge/Python-3.12-grey?style=plastic&logo=python&logoColor=white&labelColor=%233776AB)

 - ![alt text](https://img.shields.io/badge/Django-5.0.7-grey?style=plastic&logo=django&logoColor=white&labelColor=%23092E20)

 - ![alt text](https://img.shields.io/badge/PostgreSQL-16.3-grey?style=plastic&logo=postgresql&logoColor=white&labelColor=%234169E1)

 - ![alt text](https://img.shields.io/badge/Redis-5.0.3-grey?style=plastic&logo=redis&logoColor=white&labelColor=DC382D)

 - ![alt text](https://img.shields.io/badge/Docker-v25.0.3-grey?style=plastic&logo=docker&logoColor=white&labelColor=2496ED)

 - [![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)

### Описание проекта
Разработано Django-приложение, которое отображает прогноз погоды для заданного города.

При запросе города http://127.0.0.1:8000/weather/
```json
{
    "city": "Paris"
}
```

***

### Запуск через консоль

<details>
<summary>Для запуска через консоль необходимо:</summary>

- Клонировать проект на собственный диск в новом каталоге
  - Создать виртуальное окружение
  - Установить зависимости командой:
    ```python
    pip install -r requirements.txt
    ```
<details>
<summary>Прописать переменные окружения в файле `.env.sample`</summary>
   
```dotenv
SECRET_KEY='Секретный ключ Django'
DEBUG='True/False', например: True

# PostgreSQL
POSTGRES_DB_NAME='Название базы данных', например: 'name_of_db' или 'sdk_weather'
POSTGRES_DB_USER='Пользователь базы данных', например: 'db_user' или 'postgres'
POSTGRES_DB_PASSWORD='Пароль пользователя базы данных', например: 'your_password'
POSTGRES_DB_HOST='Хост базы данных', например: '127.0.0.1' или 'localhost' или 'db' для Docker
POSTGRES_DB_PORT='Порт базы данных', например: '5432'

REDIS_HOST='Хост базы данных', например: 'redis'
REDIS_PORT='Порт базы данных', например: '6379'
REDIS_DB='Номер базы данных', например: '0' или '1'

# Superuser
ADMIN_USERNAME=admin
ADMIN_EMAIL=admin@example.com
ADMIN_PASSWORD=admin

# Open weather map api keys
WEATHER_API_KEY_1=your_api_key_1


```
</details>

<details>
<summary>Создать базу данных (в данном проекте используется PostgreSQL)</summary>

```python
psql -U postgres
create database weather;
\q
```
</details>

- Применить миграции командой:
    ```python
    python manage.py migrate
    ```

<details>
<summary>Для создания тестового пользователя - администратор:</summary>

- login: admin@example.com
- password: admin 
    ```python
    python manage.py csu
    ```
</details>
 
<details>
<summary>Для запуска сервера через терминал:</summary>

- Запустить Redis (в окне терминала под Ubuntu)
    ```linux
    sudo service redis-server start
    ```

- Запустить сервер (в другом окне терминала)
    ```python
    python manage.py runserver
    ```
</details>

</details>

***

### Запуск через Docker

<details>
<summary>Для запуска через Docker необходимо:</summary>

- Клонировать проект на собственный диск в новом каталоге
-  <details>
   <summary>Прописать переменные окружения в файле `.env.sample`</summary>
   
    ```dotenv
    SECRET_KEY='Секретный ключ Django'
    DEBUG='True/False', например: True
    
    # PostgreSQL
    POSTGRES_DB_NAME='Название базы данных', например: 'name_of_db' или 'sdk_weather'
    POSTGRES_DB_USER='Пользователь базы данных', например: 'db_user' или 'postgres'
    POSTGRES_DB_PASSWORD='Пароль пользователя базы данных', например: 'your_password'
    POSTGRES_DB_HOST='Хост базы данных', например: '127.0.0.1' или 'localhost' или 'db' для Docker
    POSTGRES_DB_PORT='Порт базы данных', например: '5432'
    
   REDIS_HOST='Хост базы данных', например: 'redis'
   REDIS_PORT='Порт базы данных', например: '6379'
   REDIS_DB='Номер базы данных', например: '0' или '1'
   
    # Superuser
    ADMIN_USERNAME=admin
    ADMIN_EMAIL=admin@example.com
    ADMIN_PASSWORD=admin
    
    # Open weather map api keys
    WEATHER_API_KEY_1=your_api_key_1
    WEATHER_API_KEY_2=your_api_key_2
    
    # Celery
    CELERY_BROKER_URL=redis://redis:6379/0
    CELERY_RESULT_BACKEND=redis://redis:6379/0
    CELERY_TIMEZONE=Europe/Madrid
    ```
   </details>

- Ввести в терминале команду:
    ```python
    docker-compose up --build
    ```
    > Происходит сборка образа контейнера согласно инструкции в файле Dockerfile и последовательный запуск всех контейнеров согласно инструкции в файле docker-compose.yaml

</details>

***

### Для завершения работы необходимо:

 - Нажать комбинацию клавиш `CTRL + C` в окне терминала

***

<details>
<summary>Посмотреть покрытие тестами можно:</summary>

```python
coverage run --source='.' manage.py test
```
```python
coverage report
```
</details>

***

<details>
<summary><b>Connect with me:</b></summary>
   <p align="left">
       <a href="mailto:pafos.light@gmail.com"><img src="https://img.shields.io/badge/gmail-%23EA4335.svg?style=plastic&logo=gmail&logoColor=white" alt="Gmail"/></a>
       <a href="https://t.me/petr_lip"><img src="https://img.shields.io/badge/telegram-blue?style=plastic&logo=telegram&logoColor=white" alt="Telegram"/></a>
   </p>
</details>

